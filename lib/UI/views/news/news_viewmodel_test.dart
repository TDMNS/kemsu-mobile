import 'dart:convert';

import 'package:dio/dio.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:kemsu_app/UI/views/news/test_model.dart';
import 'package:stacked/stacked.dart';
import 'package:http/http.dart' as http;
import '../../../Configurations/config.dart';
import 'news_model.dart';

class NewsViewModelTest extends BaseViewModel {
  NewsViewModelTest(BuildContext context);
  final storage = const FlutterSecureStorage();
  List<NewsMessageClass> newsMessageList = [];
  List<NewsFileClass> newsFileList = [];
  List<Autogenerated> testModel = [];
  Autogenerated? newsModel;

  Future onReady() async {}

  void getMessages() async {
    String? token = await storage.read(key: 'tokenKey');
    Dio dio = Dio();
    // final response = await dio.get('${Config.newsMessagesTest}?limit=10',
    //     options: Options(headers: {'x-access-token': token}));
    final responseHttp = await http.get(
        Uri.parse('${Config.newsMessages}?limit=10'),
        headers: {'x-access-token': token!});
    //var newsData = json.decode(responseHttp.body);
    var newsResponseBody = responseHttp.body;
    List<dynamic> jsonResponse = json.decode(newsResponseBody);
    for (int i=0; i<jsonResponse.length;i++){
      testModel = Autogenerated.fromJson(jsonResponse[i]) as List<Autogenerated>;
    }
    // jsonResponse.map((element) => Autogenerated.fromJson(element)).toList();
    // testModel = parseTest(tempData);
    // testModel = parseTest(jsonResponse);
    // newsModel = Autogenerated.fromJson(jsonResponse);
    // List<Autogenerated> newsTemp = List<Autogenerated>.from(jsonResponse.map((model)=> Autogenerated.fromJson(model)));

    // newsModel = Autogenerated.fromJson(jsonResponse);
    // print('newsTemp[1].file!.mimeType');
  }

  List<NewsMessageClass> parseNewsTextMessage(List response) {
    return response
        .map<NewsMessageClass>((json) => NewsMessageClass.fromJson(json))
        .toList();
  }

  List<NewsFileClass> parseFileMessage(List response) {
    return response
        .map<NewsFileClass>((json) => NewsFileClass.fromJson(json))
        .toList();
  }

  List<Autogenerated> parseTest(List response) {
    return response
        .map<Autogenerated>((json) => Autogenerated.fromJson(json))
        .toList();
  }
}
